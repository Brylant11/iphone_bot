from flask import Flask
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime
import asyncio
import os
import threading

# Token bota
TOKEN = os.getenv("BOT_TOKEN") or "8078750965:AAHOJreGct5e0mxEva8QIjPbUXMpSQromfs"

app_flask = Flask(__name__)

# Endpoint ≈ºeby Render nie usypia≈Ç bota
@app_flask.route('/')
def home():
    return "Bot dzia≈Ça."

# Komenda testowa
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("Komenda '/start' zosta≈Ça wywo≈Çana.")
    current_hour = datetime.now().hour
    print(f"Aktualna godzina: {current_hour}")
    
    if 8 <= current_hour < 20:
        await update.message.reply_text("Cze≈õƒá! Bot dzia≈Ça üöÄ")
    else:
        await update.message.reply_text("Bot ≈õpi üò¥ (dostƒôpny od 8:00 do 20:00)")

# Funkcja uruchamiajƒÖca bota
async def run_bot():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    print("üîÑ Bot startuje...")
    await app.run_polling()
    print("‚úÖ Bot dzia≈Ça.")

# Funkcja startujƒÖca Flask + Bota w osobnych wƒÖtkach
def start_all():
    # Flask dzia≈Ça w osobnym wƒÖtku
    threading.Thread(target=lambda: app_flask.run(host="0.0.0.0", port=10000)).start()

    # Bot dzia≈Ça na g≈Ç√≥wnym wƒÖtku
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    
    print("Scrapowanie OLX...")  # Lub inne logi
    # Aplikacja Flask dzia≈Ça w tle

# Start ca≈Çej apki
if __name__ == "__main__":
    start_all()