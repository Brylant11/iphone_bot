from flask import Flask
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime
import asyncio
import os

# Token bota
TOKEN = os.getenv("BOT_TOKEN") or "8078750965:AAHOJreGct5e0mxEva8QIjPbUXMpSQromfs"

# Tworzymy aplikacjƒô Flask
app_flask = Flask(__name__)

# Endpoint ≈ºeby Render nie usypia≈Ç bota
@app_flask.route('/')
def home():
    print("Flask dzia≈Ça!")  # Logowanie, aby sprawdziƒá, czy Flask dzia≈Ça
    return "Bot dzia≈Ça."

# Komenda testowa
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_hour = datetime.now().hour
    if 8 <= current_hour < 20:
        await update.message.reply_text("Cze≈õƒá! Bot dzia≈Ça üöÄ")
    else:
        await update.message.reply_text("Bot ≈õpi üò¥ (dostƒôpny od 8:00 do 20:00)")

# Funkcja uruchamiajƒÖca bota
async def run_bot():
    print("üîÑ Bot startuje...")  # Logowanie przed uruchomieniem bota
    app = ApplicationBuilder().token(TOKEN).build()
    print("üîÑ Bot zbudowany")  # Logowanie po zbudowaniu aplikacji

    app.add_handler(CommandHandler("start", start))
    print("üîÑ Dodano handler")  # Logowanie po dodaniu handlera

    try:
        await app.run_polling()
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd przy uruchomieniu bota: {e}")
    print("‚úÖ Bot dzia≈Ça.")  # Logowanie po uruchomieniu bota

# Funkcja startujƒÖca Flask + Bota
def start_all():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    loop.create_task(run_bot())

    print("Scrapowanie OLX...")  # Logowanie przed uruchomieniem Flask
    app_flask.run(host="0.0.0.0", port=10000)

# Start ca≈Çej apki
if __name__ == "__main__":
    start_all()